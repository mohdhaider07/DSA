
#include <bits/stdc++.h>
#include <iostream>
#include <queue>
using namespace std;

template <typename T>

class TreeNode {
public:
  int data;
  vector<TreeNode<T> *> children;

  TreeNode(T data) { this->data = data; }
};
// print function
void printTree(TreeNode<int> *root) {
  if (root == NULL) {
    return;
  }
  cout << root->data << " : ";

  for (int i = 0; i < root->children.size(); i++) {
    cout << root->children[i]->data << " ,";
  }
  cout << endl;
  for (int i = 0; i < root->children.size(); i++) {
    printTree(root->children[i]);
  }
}
// input Recursive function
TreeNode<int> *takeInput() {
  int rootData;
  cout << "Enter data : ";
  cin >> rootData;
  TreeNode<int> *root = new TreeNode<int>(rootData);
  int n;
  cout << "Enter No of Children You Want : ";
  cin >> n;
  for (int i = 0; i < n; ++i) {
    TreeNode<int> *child = takeInput();
    root->children.push_back(child);
  }
  return root;
}

// take inpur level wise
TreeNode<int> *takeInputLevelWise() {
  int rootData;
  cout << "Enter Root Data : ";
  cin >> rootData;
  TreeNode<int> *root = new TreeNode<int>(1);
  queue<TreeNode<int> *> q;
  q.push(root);
  while (!q.empty()) {
    TreeNode<int> *f = q.front();
    q.pop();
    int n;
    cout << "Enter the no of children of " << f->data << " : ";
    cin >> n;
    for (int i = 0; i < n; ++i) {
      int childData;
      cout << "Enter child Data of " << f->data << " of position " << i + 1
           << " : ";
      cin >> childData;
      TreeNode<int> *child = new TreeNode<int>(childData);
      q.push(child);
      f->children.push_back(child);
    }
  }
  return root;
}
int main() {

  TreeNode<int> *root = takeInputLevelWise();
  printTree(root);

  return 0;
}
