  // search in tree recursively 
  TreeNode* searchBST(TreeNode* root, int val) {
        if(root==NULL){
            return NULL;
        }
        if(root->val==val){
      
            return root;
        } 
        if(root->val>val){
           
           return searchBST(root->left,val);  
        }else if(root->val<val){
            
           return searchBST(root->right,val);
        }
    
        return NULL;
    }
    // iterative meathod
     TreeNode* searchBST(TreeNode* root, int val) {

        
        while(root!=NULL){    
            if(root->val==val)return root;
            else if(root->val>val){
                root=root->left;
            }else if(root->val<val){
                root=root->right;
            }
        } 
        return root;
    }
    
    // contructing Tree from sorted array 
     TreeNode* helper(vector<int>&nums,int s,int e){
        if(s>e){
            return NULL;
        }
        int mid=(s+e)/2;
        int rootData=nums[mid];
        TreeNode*root=new TreeNode(rootData);
        root->left=helper(nums,s,mid-1);
        root->right=helper(nums,mid+1,e);
        return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
       int n =nums.size();
        return helper(nums,0,n-1); 
    }
    
    // contructing Tree from sorted array
