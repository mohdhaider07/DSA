 // finding the number which containing 4  from 1 to N
 
 int countNumberswith4(int N) {
        // code here
        int c=0;
        for(int i=1;i<=N;i++){
            string str=to_string(i);
             if(str.find('4')!=string::npos)
            c++;
        }
        return c; 

    }
     // finding the number which containing 4  from 1 to N end
    
    
    // longest common subsequense
    


    int lcs(string s1,int i,string s2,int j){
        if(i==s1.size()||j==s2.size()){
            return 0;
        }
        if(s1[i]==s2[j]){
            return 1+lcs(s1,i+1,s2,j+1);
        }

        return max(lcs(s1,i,s2,j+1),lcs(s1,i+1,s2,j));
    }

    int longestCommonSubsequence(string s1, string s2) {
        int m=s1.size();
        int n=s2.size();
        int dp[m+1][n+1];
        for(int i=0;i<=m;i++){
            for(int j=0;j<=n;j++){
              if(i==0||j==0){
                dp[i][j]=0;
                }   else if(s1[i-1]==s2[j-1]){
                        dp[i][j]=1+dp[i-1][j-1];
                     }else{
                         dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                     }
            }
        }
        return dp[m][n];
    }


// edit distance


    int md(string s1,int m,string s2,int n){
            if(m==0){
                return n;
            }
            if(n==0){
                return m;
            }
            if(s1[m-1]==s2[n-1]){
                return md(s1,m-1,s2,n-1);
            }
            int i=md(s1,m,s2,n-1);// insertion
            int d=md(s1,m-1,s2,n);//detetion
            int r=md(s1,m-1,s2,n-1);//replace

            return 1+min(i,min(d,r));
    }

    int minDistance(string s1, string s2) {
       int m=s1.size();
       int n=s2.size();

        int dp[m+1][n+1];
        for(int i=0;i<=m;i++){
                    for(int j=0;j<=n;j++){
                            if(i==0){
                                dp[i][j]=j;
                            }else if(j==0){
                                 dp[i][j]=i;
                            } else if(s1[i-1]==s2[j-1]){
                                dp[i][j]=dp[i-1][j-1];
                            }else {
                                int insert=dp[i][j-1];
                                int delet=dp[i-1][j];
                                int replace=dp[i-1][j-1];
                                dp[i][j]=1+min(insert,min(delet,replace));
                            }
                     }
        }
        return dp[m][n];
    }
       // longest common subsequense end

// edit distance end
